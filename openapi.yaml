openapi: "3.0.0"
info:
  title: Billing System API
  description: Generic Billing System API
  version: 1.0.0
  summary: Billing System API

servers:
  - url: http://localhost:8080/api/v1
    description: Local server
  - url: http://localhost:8080/api/v1
    description: Development server

security:
  - bearerAuth: [] # use the same name as above

components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes

  schemas:
    ErrorData:
      type: object
      properties:
        message:
          type: string
        errors:
          type: array
          items:
            type: string
            required: false

    CreateItem:
      type: object
      properties:
        name:
          type: string
          format: string
          example: "Laptop"
        description:
          type: string
          format: string
          example: "Laptop with magic powers"
        image:
          type: string
          format: string
          example: "https://example.com/images/laptop.png"
        price:
          type: integer
          format: int64
          example: 300
        availableQuantity:
          type: integer
          format: int64
          example: 2
        allowedMaxQuantity:
          type: integer
          format: int64
          example: 5

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          format: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        user:
          type: object
          properties:
            id:
              type: number
            email:
              type: string
            name:
              type: string
            roles:
              type: array
              items:
                type: string
              example: ["admin", "customer"]
            permissions:
              type: array
              items:
                type: string
              example: ["create:order", "update:item"]

tags:
  - name: Items
    description: Items(products) in inventory.
  - name: Authentication
  - name: Customers
  - name: Orders

paths:
  /items:
    post:
      tags:
        - Items
      summary: Create an item (product)
      description: Create an item (product) in the stock
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateItem"
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"

  /items/{itemId}:
    deprecated: false
    parameters:
      - in: path
        name: itemId
        schema:
          type: integer
          minimum: 1
        required: true
        description: Numeric id of the item to get
    put:
      tags:
        - Items
      deprecated: false
      summary: Update an item (product)
      description: Update an item (product) in the stock
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateItem"
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
    get:
      tags:
        - Items
      summary: Get item data
      responses:
        default:
          description: Response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
        - Items
      summary: Delete an item
      responses:
        default:
          description: Response
          content:
            application/json:
              schema:
                type: object

  /items/search:
    deprecated: false
    parameters:
      - in: query
        name: query
        schema:
          type: string
          minimum: 1
        required: false
        description: Text to search in items
    get:
      tags:
        - Items
      summary: Search items
      responses:
        default:
          description: Response
          content:
            application/json:
              schema:
                type: object

  /items/paginated:
    summary: Get items with pagination
    deprecated: false
    parameters:
      - in: query
        name: page
        schema:
          type: number
          minimum: 0
        required: true
        default: 0
        description: page number
      - in: query
        name: size
        schema:
          type: number
          minimum: 1
        required: true
        default: 10
        description: no of items to display in a page
      - in: query
        name: sortBy
        schema:
          type: string
          enum:
            [
              "price",
              "createdAt",
              "updatedAt",
              "deletedAt",
              "description",
              "availableQuantity",
              "allowedMinQuantity",
              "allowedMaxQuantity",
            ]
        required: false
        default: "updatedAt"
        description: page number
      - in: query
        name: sortDirection
        schema:
          type: string
          enum: ["asc", "desc"]
          required: false
          default: "desc"
      - in: query
        name: search
        schema:
          type: string
          minimum: 1
          required: false

    get:
      tags:
        - Items
      summary: Get an item data
      responses:
        default:
          description: Response
          content:
            application/json:
              schema:
                type: object

  /auth/sign-in:
    post:
      tags:
        - Authentication
      deprecated: false
      summary: Sign In
      description: Sign in to app
      requestBody:
        required: true
        description: Please choose strong password
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: string
                  example: ramesh@example.com
                password:
                  type: string
                  format: string
                  example: password123
      responses:
        "200":
          description: sign in successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"

  /auth/sign-up:
    post:
      tags:
        - Authentication
      deprecated: false
      summary: Sign In
      description: Sign in to app
      requestBody:
        required: true
        description: Please choose strong password
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: string
                  example: ramesh@example.com
                password:
                  type: string
                  format: string
                  example: password123
                name:
                  type: string
                  format: string
                  example: ramesh
      responses:
        "201":
          description: signup successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
